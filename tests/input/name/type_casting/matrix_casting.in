procedure main() returns integer {
  var i = as<integer[2, 1]>(1.0);
  var r = as<real[2, 1]>(1.0);

  integer[2, 1] i2 = as<integer[2, 1]>([[1], [1]]);
  real[2, 1] r2 = as<real[2, 1]>([[1], [1]]);
  boolean[2, 1] b2 = as<boolean[2, 1]>([[1], [1]]);
  character[2, 1] c2 = as<character[2, 1]>([[1], [1]]);

  integer[2, 1] i3 = as<integer[2, 1]>([[true], [true]]);
  boolean[2, 1] b3 = as<boolean[2, 1]>([[true], [true]]);
  character[2, 1] c3 = as<character[2, 1]>([[true], [true]]);

  integer[2, 1] i4 = as<integer[2, 1]>([['A'], ['A']]);
  boolean[2, 1] b4 = as<boolean[2, 1]>([['A'], ['A']]);
  character[2, 1] c4 = as<character[2, 1]>([['A'], ['A']]);

  // truncating a cast
  integer[2, 1] i5 = as<integer[2, 1]>([[1, 3], [4, 2]]);
  // padding a cast
  integer[2, 1] i6 = as<integer[2, 1]>([[1], [4]]);
  // taking original size
  real[*,*] r5 = as<real[*,*]>([1, 3], [4, 2]);
  real[*,2] r6 = as<real[*,2]>([1, 3], [4, 2, 2]);
  real[2,*] r7 = as<real[2,*]>([1, 3, 2], [4, 2]);

  i -> std_output; ' ' -> std_output;
  r -> std_output; '\n' -> std_output;

  i2 -> std_output; ' ' -> std_output;
  r2 -> std_output; ' ' -> std_output;
  b2 -> std_output; ' ' -> std_output;
  c2 -> std_output; '\n' -> std_output;

  i3 -> std_output; ' ' -> std_output;
  b3 -> std_output; ' ' -> std_output;
  c3 -> std_output; '\n' -> std_output;

  i4 -> std_output; ' ' -> std_output;
  b4 -> std_output; ' ' -> std_output;
  c4 -> std_output; '\n' -> std_output;
  
  i5 -> std_output; ' ' -> std_output;
  i6 -> std_output; ' ' -> std_output;
  r5 -> std_output; ' ' -> std_output;
  r6 -> std_output; ' ' -> std_output;
  r7 -> std_output; '\n' -> std_output;
  return 0;
}